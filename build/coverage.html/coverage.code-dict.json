{"/home/travis/build/npmtest/node-npmtest-pino/test.js":"/* istanbul instrument in package npmtest_pino */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pino/lib.npmtest_pino.js":"/* istanbul instrument in package npmtest_pino */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_pino = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_pino = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-pino/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-pino && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_pino */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_pino\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_pino.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_pino.rollup.js'] =\n            local.assetsDict['/assets.npmtest_pino.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_pino.__dirname +\n                    '/lib.npmtest_pino.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/pino.js":"'use strict'\n\nvar stringifySafe = require('fast-safe-stringify')\nvar EventEmitter = require('events').EventEmitter\nvar fs = require('fs')\nvar pump = require('pump')\nvar flatstr = require('flatstr')\nvar pretty = require('./pretty')\nvar events = require('./lib/events')\nvar levels = require('./lib/levels')\nvar tools = require('./lib/tools')\nvar serializers = require('./lib/serializers')\n\nvar LOG_VERSION = 1\n\nvar defaultOptions = {\n  safe: true,\n  name: undefined,\n  serializers: {},\n  timestamp: true,\n  slowtime: false,\n  extreme: false,\n  level: 'info',\n  levelVal: undefined,\n  prettyPrint: false,\n  onTerminated: function (eventName, err) {\n    if (err) return process.exit(1)\n    process.exit(0)\n  },\n  enabled: true\n}\n\nvar pinoPrototype = Object.create(EventEmitter.prototype, {\n  silent: {\n    value: tools.noop,\n    enumerable: true\n  },\n  stream: {\n    value: process.stdout,\n    writable: true\n  }\n})\n\nvar levelMethods = ['fatal', 'error', 'warn', 'info', 'debug', 'trace']\nlevelMethods.forEach(function (m) {\n  Object.defineProperty(pinoPrototype, m, {\n    value: tools.genLog(levels.levels[m]),\n    enumerable: true,\n    writable: true\n  })\n})\n\nfunction getLevelVal () {\n  return this._levelVal\n}\nfunction setLevelVal (num) {\n  if (typeof num === 'string') { return this._setLevel(num) }\n\n  if (this.emit) {\n    this.emit('level-change', this.levels.labels[num], num, this.levels.labels[this._levelVal], this._levelVal)\n  }\n\n  this._levelVal = num\n\n  for (var key in this.levels.values) {\n    if (num > this.levels.values[key]) {\n      this[key] = tools.noop\n      continue\n    }\n    this[key] = levels.isStandardLevel(key) ? pinoPrototype[key] : tools.genLog(this.levels.values[key])\n  }\n}\nObject.defineProperty(pinoPrototype, 'levelVal', {\n  get: getLevelVal,\n  set: setLevelVal\n})\n\nfunction _setLevel (level) {\n  if (typeof level === 'number') {\n    if (!isFinite(level)) {\n      throw Error('unknown level ' + level)\n    }\n    level = this.levels.labels[level]\n  }\n\n  if (!this.levels.values[level]) {\n    throw Error('unknown level ' + level)\n  }\n  this.levelVal = this.levels.values[level]\n}\nObject.defineProperty(pinoPrototype, '_setLevel', {\n  value: _setLevel\n})\n\nObject.defineProperty(pinoPrototype, '_getLevel', {\n  value: function _getLevel (level) {\n    return this.levels.labels[this.levelVal]\n  }\n})\n\nObject.defineProperty(pinoPrototype, 'level', {\n  get: pinoPrototype._getLevel,\n  set: pinoPrototype._setLevel\n})\n\nObject.defineProperty(pinoPrototype, '_lscache', {\n  value: tools.copy({}, levels.lscache)\n})\n\nObject.defineProperty(\n  pinoPrototype,\n  'LOG_VERSION',\n  {value: LOG_VERSION}\n)\n\nfunction asJson (obj, msg, num) {\n  if (!msg && obj instanceof Error) {\n    msg = obj.message\n  }\n  var data = this._baseLog + this._lscache[num] + this.time()\n  // to catch both null and undefined\n  /* eslint-disable eqeqeq */\n  if (msg != undefined) {\n    data += ',\"msg\":' + JSON.stringify('' + msg)\n  }\n  // we need the child bindings added to the output first so that logged\n  // objects can take precedence when JSON.parse-ing the resulting log line\n  data = data + this.chindings\n  var value\n  if (obj) {\n    if (obj.stack) {\n      data += ',\"type\":\"Error\",\"stack\":' + this.stringify(obj.stack)\n    }\n    for (var key in obj) {\n      value = obj[key]\n      if ((!obj.hasOwnProperty || obj.hasOwnProperty(key)) && value !== undefined) {\n        value = this.stringify(this.serializers[key] ? this.serializers[key](value) : value)\n        if (value !== undefined) {\n          data += ',\"' + key + '\":' + value\n        }\n      }\n    }\n  }\n  return data + this.end\n}\nObject.defineProperty(pinoPrototype, 'asJson', {\n  enumerable: true,\n  value: asJson\n})\n\nfunction child (bindings) {\n  if (!bindings) {\n    throw Error('missing bindings for child Pino')\n  }\n\n  var data = ','\n  var value\n  var key\n  for (key in bindings) {\n    value = bindings[key]\n    if (key !== 'level' && key !== 'serializers' && bindings.hasOwnProperty(key) && value !== undefined) {\n      value = this.serializers[key] ? this.serializers[key](value) : value\n      data += '\"' + key + '\":' + this.stringify(value) + ','\n    }\n  }\n  data = this.chindings + data.substr(0, data.length - 1)\n\n  var opts = {\n    level: bindings.level || this.level,\n    levelVal: levels.isStandardLevelVal(this.levelVal) ? undefined : this.levelVal,\n    serializers: bindings.hasOwnProperty('serializers') ? Object.assign({}, this.serializers, bindings.serializers) : this.serializers,\n    stringify: this.stringify,\n    end: this.end,\n    name: this.name,\n    timestamp: this.timestamp,\n    slowtime: this.slowtime,\n    chindings: data,\n    cache: this.cache,\n    formatOpts: this.formatOpts\n  }\n\n  var _child = Object.create(this)\n  _child.stream = this.stream\n  tools.applyOptions.call(_child, opts)\n  return _child\n}\nObject.defineProperty(pinoPrototype, 'child', {\n  enumerable: true,\n  value: child\n})\n\nfunction pinoWrite (obj, msg, num) {\n  var s = this.asJson(obj, msg, num)\n  if (!this.cache) {\n    this.stream.write(flatstr(s))\n    return\n  }\n\n  this.cache.buf += s\n  if (this.cache.buf.length > this.cache.size) {\n    this.stream.write(flatstr(this.cache.buf))\n    this.cache.buf = ''\n  }\n}\nObject.defineProperty(pinoPrototype, 'write', {\n  value: pinoWrite\n})\n\nfunction flush () {\n  if (!this.cache) {\n    return\n  }\n\n  this.stream.write(flatstr(this.cache.buf))\n  this.cache.buf = ''\n}\nObject.defineProperty(pinoPrototype, 'flush', {\n  enumerable: true,\n  value: flush\n})\n\nfunction addLevel (name, lvl) {\n  if (this.levels.values.hasOwnProperty(name)) return false\n  if (this.levels.labels.hasOwnProperty(lvl)) return false\n  this.levels.values[name] = lvl\n  this.levels.labels[lvl] = name\n  this._lscache[lvl] = flatstr('\"level\":' + Number(lvl))\n  this[name] = tools.genLog(lvl)\n  return true\n}\nObject.defineProperty(pinoPrototype, 'addLevel', {\n  enumerable: true,\n  value: addLevel\n})\n\nfunction pino (opts, stream) {\n  var iopts = opts\n  var istream = stream\n  if (iopts && (iopts.writable || iopts._writableState)) {\n    istream = iopts\n    iopts = defaultOptions\n  }\n  iopts = Object.assign({}, defaultOptions, iopts)\n  if (iopts.extreme && iopts.prettyPrint) throw Error('cannot enable pretty print in extreme mode')\n  istream = istream || process.stdout\n  if (iopts.prettyPrint) {\n    var pstream = pretty(iopts.prettyPrint)\n    var origStream = istream\n    pump(pstream, origStream, function (err) {\n      if (err) instance.emit('error', err)\n    })\n    istream = pstream\n  }\n\n  // internal options\n  iopts.stringify = iopts.safe ? stringifySafe : JSON.stringify\n  iopts.formatOpts = {lowres: true}\n  iopts.end = ',\"v\":' + LOG_VERSION + '}\\n'\n  iopts.cache = !iopts.extreme ? null : {\n    size: 4096,\n    buf: ''\n  }\n  iopts.chindings = ''\n\n  if (iopts.enabled === false) {\n    iopts.level = 'silent'\n  }\n\n  var instance = Object.create(pinoPrototype)\n  instance.stream = istream\n  tools.defineLevelsProperty(instance)\n  tools.applyOptions.call(instance, iopts)\n  if (iopts.cache) setTimeout(waitForFDSettle, 100)\n\n  var settleTries = 0\n  function waitForFDSettle () {\n    var isBlockable = tools.streamIsBlockable(istream)\n    if (isBlockable === false && settleTries > 10) {\n      return instance.emit('error', Error('stream must have a file descriptor in extreme mode'))\n    } else if (isBlockable === true) {\n      return events(instance, extremeModeExitHandler)\n    }\n    settleTries += 1\n    setTimeout(waitForFDSettle, 100)\n  }\n\n  function extremeModeExitHandler () {\n    var buf = iopts.cache.buf\n    if (buf) {\n      // We need to block the process exit long enough to flush the buffer\n      // to the destination stream. We do that by forcing a synchronous\n      // write directly to the stream's file descriptor.\n      var fd = (istream.fd) ? istream.fd : istream._handle.fd\n      fs.writeSync(fd, buf)\n    }\n  }\n\n  return instance\n}\n\ntools.defineLevelsProperty(pino)\n\nmodule.exports = pino\nmodule.exports.stdSerializers = {\n  req: serializers.asReqValue,\n  res: serializers.asResValue,\n  err: serializers.asErrValue\n}\nmodule.exports.pretty = pretty\nObject.defineProperty(\n  module.exports,\n  'LOG_VERSION',\n  {value: LOG_VERSION, enumerable: true}\n)\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/pretty.js":"'use strict'\n\nvar split = require('split2')\nvar Parse = require('fast-json-parse')\nvar chalk = require('chalk')\n\nvar levels = {\n  default: 'USERLVL',\n  60: 'FATAL',\n  50: 'ERROR',\n  40: 'WARN',\n  30: 'INFO',\n  20: 'DEBUG',\n  10: 'TRACE'\n}\n\nvar standardKeys = [\n  'pid',\n  'hostname',\n  'name',\n  'level',\n  'msg',\n  'time',\n  'v'\n]\n\nfunction withSpaces (value) {\n  var lines = value.split('\\n')\n  for (var i = 1; i < lines.length; i++) {\n    lines[i] = '    ' + lines[i]\n  }\n  return lines.join('\\n')\n}\n\nfunction filter (value) {\n  var keys = Object.keys(value)\n  var result = ''\n\n  for (var i = 0; i < keys.length; i++) {\n    if (standardKeys.indexOf(keys[i]) < 0) {\n      result += '    ' + keys[i] + ': ' + withSpaces(JSON.stringify(value[keys[i]], null, 2)) + '\\n'\n    }\n  }\n\n  return result\n}\n\nfunction isPinoLine (line) {\n  return line &&\n    line.hasOwnProperty('hostname') &&\n    line.hasOwnProperty('pid') &&\n    (line.hasOwnProperty('v') && line.v === 1)\n}\n\nfunction pretty (opts) {\n  var timeTransOnly = opts && opts.timeTransOnly\n  var formatter = opts && opts.formatter\n  var levelFirst = opts && opts.levelFirst\n\n  var stream = split(mapLine)\n  var ctx\n  var levelColors\n\n  var pipe = stream.pipe\n\n  stream.pipe = function (dest, opts) {\n    ctx = new chalk.constructor({\n      enabled: !!(chalk.supportsColor && dest.isTTY)\n    })\n\n    levelColors = {\n      default: ctx.white,\n      60: ctx.bgRed,\n      50: ctx.red,\n      40: ctx.yellow,\n      30: ctx.green,\n      20: ctx.blue,\n      10: ctx.grey\n    }\n\n    pipe.call(stream, dest, opts)\n  }\n\n  return stream\n\n  function mapLine (line) {\n    var parsed = new Parse(line)\n    var value = parsed.value\n\n    if (parsed.err || !isPinoLine(value)) {\n      // pass through\n      return line + '\\n'\n    }\n\n    if (formatter) {\n      return opts.formatter(parsed.value) + '\\n'\n    }\n\n    if (timeTransOnly) {\n      value.time = asISODate(value.time)\n      return JSON.stringify(value) + '\\n'\n    }\n\n    line = (levelFirst)\n        ? asColoredLevel(value) + ' [' + asISODate(value.time) + ']'\n        : '[' + asISODate(value.time) + '] ' + asColoredLevel(value)\n\n    line += ' ('\n    if (value.name) {\n      line += value.name + '/'\n    }\n    line += value.pid + ' on ' + value.hostname + ')'\n    line += ': '\n    if (value.msg) {\n      line += ctx.cyan(value.msg)\n    }\n    line += '\\n'\n    if (value.type === 'Error') {\n      line += '    ' + withSpaces(value.stack) + '\\n'\n    } else {\n      line += filter(value)\n    }\n    return line\n  }\n\n  function asISODate (time) {\n    return new Date(time).toISOString()\n  }\n\n  function asColoredLevel (value) {\n    if (levelColors.hasOwnProperty(value.level)) {\n      return levelColors[value.level](levels[value.level])\n    } else {\n      return levelColors.default(levels.default)\n    }\n  }\n}\n\nmodule.exports = pretty\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/lib/events.js":"'use strict'\n\nmodule.exports = function (pinoInstance, internalExtremeHandler) {\n  function theWorldIsBurning (err) {\n    runInternalHandler()\n    handlers.handledOnTerminate = true\n    pinoInstance.onTerminated(this.name, err)\n  }\n\n  function hup (err) {\n    if (process.listenerCount('SIGHUP') === 1) {\n      return theWorldIsBurning.call({name: 'SIGHUP'}, err)\n    }\n    pinoInstance.flush()\n  }\n\n  function runInternalHandler () {\n    if (handlers.handledOnTerminate) return\n    internalExtremeHandler()\n  }\n\n  var handlers = {\n    beforeExit: theWorldIsBurning.bind({name: 'beforeExit'}),\n    exit: theWorldIsBurning.bind({name: 'exit'}),\n    uncaughtException: theWorldIsBurning.bind({name: 'uncaughtException'}),\n    SIGHUP: hup,\n    SIGINT: theWorldIsBurning.bind({name: 'SIGINT'}),\n    SIGQUIT: theWorldIsBurning.bind({name: 'SIGQUIT'}),\n    SIGTERM: theWorldIsBurning.bind({name: 'SIGTERM'})\n  }\n\n  Object.keys(handlers).forEach(function (k) {\n    process.on(k, handlers[k])\n  })\n\n  return handlers\n}\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/lib/levels.js":"'use strict'\n\nvar flatstr = require('flatstr')\n\nvar levels = {\n  fatal: 60,\n  error: 50,\n  warn: 40,\n  info: 30,\n  debug: 20,\n  trace: 10\n}\n\nvar nums = Object.keys(levels).reduce(function (o, k) {\n  o[levels[k]] = k\n  return o\n}, {})\n\n// level string cache\nvar lscache = Object.keys(nums).reduce(function (o, k) {\n  o[k] = flatstr('\"level\":' + Number(k))\n  return o\n}, {})\n\n// IIFE so the keys are cached at module load\nvar isStandardLevel = (function () {\n  var keys = Object.keys(levels)\n  return function (level) {\n    if (Infinity === level) {\n      return true\n    }\n    return keys.indexOf(level) > -1\n  }\n}())\n\nvar isStandardLevelVal = (function () {\n  var keys = Object.keys(nums)\n  return function (val) {\n    if (!isFinite(val)) {\n      return true\n    }\n    return keys.indexOf(val + '') > -1\n  }\n}())\n\nmodule.exports = {\n  levels: levels,\n  nums: nums,\n  lscache: lscache,\n  isStandardLevel: isStandardLevel,\n  isStandardLevelVal: isStandardLevelVal\n}\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/lib/tools.js":"'use strict'\n\nvar flatstr = require('flatstr')\nvar format = require('quick-format-unescaped')\nvar util = require('util')\nvar pid = process.pid\nvar os = require('os')\nvar hostname = os.hostname()\nvar baseLog = flatstr('{\"pid\":' + pid + ',\"hostname\":\"' + hostname + '\",')\nvar levels = require('./levels')\nvar serializers = require('./serializers')\nvar time = require('./time')\n\nfunction noop () {}\n\nfunction copy (a, b) {\n  for (var k in b) { a[k] = b[k] }\n  return a\n}\n\n// Must be invoked via .call() to retain speed of inlining into the\n// Pino constructor.\nfunction applyOptions (opts) {\n  this.serializers = opts.serializers\n  this.stringify = opts.stringify\n  this.end = opts.end\n  this.name = opts.name\n  this.timestamp = opts.timestamp\n  this.slowtime = opts.slowtime\n  this.chindings = opts.chindings\n  this.cache = opts.cache\n  this.formatOpts = opts.formatOpts\n  this.onTerminated = opts.onTerminated\n\n  if (opts.level && opts.levelVal) {\n    var levelIsStandard = levels.isStandardLevel(opts.level)\n    var valIsStandard = levels.isStandardLevelVal(opts.levelVal)\n    if (valIsStandard) throw Error('level value is already used: ' + opts.levelVal)\n    if (levelIsStandard === false && valIsStandard === false) this.addLevel(opts.level, opts.levelVal)\n  }\n  this._setLevel(opts.level)\n  this._baseLog = flatstr(baseLog +\n    (this.name === undefined ? '' : '\"name\":' + this.stringify(this.name) + ','))\n\n  if (opts.timestamp === false) {\n    this.time = time.getNoTime\n  } else if (opts.slowtime) {\n    this.time = time.getSlowTime\n  } else {\n    this.time = time.getTime\n  }\n}\n\nfunction defineLevelsProperty (onObject) {\n  Object.defineProperty(onObject, 'levels', {\n    value: {\n      values: copy({}, levels.levels),\n      labels: copy({}, levels.nums)\n    },\n    enumerable: true\n  })\n  Object.defineProperty(onObject.levels.values, 'silent', {value: Infinity})\n  Object.defineProperty(onObject.levels.labels, Infinity, {value: 'silent'})\n}\n\nfunction streamIsBlockable (s) {\n  if (s.hasOwnProperty('_handle') && s._handle.hasOwnProperty('fd') && s._handle.fd) return true\n  if (s.hasOwnProperty('fd') && s.fd) return true\n  return false\n}\n\nfunction countInterp (s, i) {\n  var n = 0\n  var pos = 0\n  while (true) {\n    pos = s.indexOf(i, pos)\n    if (pos >= 0) {\n      ++n\n      pos += 2\n    } else break\n  }\n  return n\n}\n\nfunction genLog (z) {\n  return function LOG (a, b, c, d, e, f, g, h, i, j, k) {\n    var l = 0\n    var m = null\n    var n = null\n    var o\n    var p\n    if (typeof a === 'object' && a !== null) {\n      m = a\n      n = [b, c, d, e, f, g, h, i, j, k]\n      l = 1\n\n      if (m.method && m.headers && m.socket) {\n        m = serializers.mapHttpRequest(m)\n      } else if (typeof m.setHeader === 'function') {\n        m = serializers.mapHttpResponse(m)\n      }\n    } else {\n      n = [a, b, c, d, e, f, g, h, i, j, k]\n    }\n    p = n.length = arguments.length - l\n    if (p > 1) {\n      l = typeof a === 'string' ? countInterp(a, '%j') : 0\n      if (l) {\n        n.length = l + countInterp(a, '%d') + countInterp(a, '%s') + 1\n        o = `${util.format.apply(null, n)}`\n      } else {\n        o = format(n, this.formatOpts)\n      }\n    } else if (p) {\n      o = n[0]\n    }\n    this.write(m, o, z)\n  }\n}\n\nmodule.exports = {\n  noop: noop,\n  copy: copy,\n  applyOptions: applyOptions,\n  defineLevelsProperty: defineLevelsProperty,\n  streamIsBlockable: streamIsBlockable,\n  genLog: genLog\n}\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/lib/serializers.js":"'use strict'\n\nfunction asReqValue (req) {\n  return {\n    method: req.method,\n    url: req.url,\n    headers: req.headers,\n    remoteAddress: req.connection.remoteAddress,\n    remotePort: req.connection.remotePort\n  }\n}\n\nfunction asResValue (res) {\n  return {\n    statusCode: res.statusCode,\n    header: res._header\n  }\n}\n\nfunction mapHttpRequest (req) {\n  return {\n    req: asReqValue(req)\n  }\n}\n\nfunction mapHttpResponse (res) {\n  return {\n    res: asResValue(res)\n  }\n}\n\nfunction asErrValue (err) {\n  var obj = {\n    type: err.constructor.name,\n    message: err.message,\n    stack: err.stack\n  }\n  for (var key in err) {\n    if (obj[key] === undefined) {\n      obj[key] = err[key]\n    }\n  }\n  return obj\n}\n\nmodule.exports = {\n  asReqValue: asReqValue,\n  asResValue: asResValue,\n  mapHttpRequest: mapHttpRequest,\n  mapHttpResponse: mapHttpResponse,\n  asErrValue: asErrValue\n}\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/lib/time.js":"'use strict'\n\nfunction getNoTime () {\n  return ''\n}\n\nfunction getTime () {\n  return ',\"time\":' + Date.now()\n}\n\nfunction getSlowTime () {\n  return ',\"time\":\"' + (new Date()).toISOString() + '\"'\n}\n\nmodule.exports = {\n  getNoTime: getNoTime,\n  getTime: getTime,\n  getSlowTime: getSlowTime\n}\n","/home/travis/build/npmtest/node-npmtest-pino/node_modules/pino/browser.js":"'use strict'\n\nvar format = require('quick-format-unescaped')\n\nmodule.exports = pino\n\nvar _console = global.console || {}\n\nfunction pino (opts) {\n  opts = opts || {}\n  opts.browser = opts.browser || {}\n  var proto = opts.browser.write || _console\n  if (opts.browser.write) opts.browser.asObject = true\n\n  var levels = ['error', 'fatal', 'warn', 'info', 'debug', 'trace']\n\n  if (typeof proto === 'function') {\n    proto.error = proto.fatal = proto.warn =\n    proto.info = proto.debug = proto.trace = proto\n  }\n\n  var level = opts.level || 'info'\n  var val = pino.levels.values[level]\n  var logger = Object.create(proto)\n  if (!logger.log) logger.log = noop\n\n  set(logger, val, 'error', 'log') // <-- must stay first\n  set(logger, val, 'fatal', 'error')\n  set(logger, val, 'warn', 'error')\n  set(logger, val, 'info', 'log')\n  set(logger, val, 'debug', 'log')\n  set(logger, val, 'trace', 'log')\n\n  logger.setMaxListeners = logger.getMaxListeners =\n  logger.emit = logger.addListener = logger.on =\n  logger.prependListener = logger.once =\n  logger.prependOnceListener = logger.removeListener =\n  logger.removeAllListeners = logger.listeners =\n  logger.listenerCount = logger.eventNames =\n  logger.write = logger.flush = noop\n\n  logger.child = child\n  function child (bindings) {\n    if (!bindings) {\n      throw new Error('missing bindings for child Pino')\n    }\n    function Child (parent) {\n      this._childLevel = (parent._childLevel | 0) + 1\n      this.error = bind(parent, bindings, 'error')\n      this.fatal = bind(parent, bindings, 'fatal')\n      this.warn = bind(parent, bindings, 'warn')\n      this.info = bind(parent, bindings, 'info')\n      this.debug = bind(parent, bindings, 'debug')\n      this.trace = bind(parent, bindings, 'trace')\n    }\n    Child.prototype = this\n    return new Child(this)\n  }\n  logger.levels = pino.levels\n  return !opts.browser.asObject ? logger : asObject(logger, levels)\n}\n\nfunction asObject (logger, levels) {\n  var k\n  for (var i = 0; i < levels.length; i++) {\n    k = levels[i]\n    logger[k] = (function (write, k) {\n      return function LOG () {\n        var args = new Array(arguments.length)\n        for (var i = 0; i < args.length; i++) args[i] = arguments[i]\n        var msg = args[0]\n        var o = { time: Date.now(), level: pino.levels.values[k] }\n        var lvl = (this._childLevel | 0) + 1\n        if (lvl < 1) lvl = 1\n        // deliberate, catching objects, arrays\n        if (msg !== null && typeof msg === 'object') {\n          while (lvl-- && typeof args[0] === 'object') {\n            Object.assign(o, args.shift())\n          }\n          msg = args.length ? format(args) : undefined\n        } else if (typeof msg === 'string') msg = format(args)\n        if (msg !== undefined) o.msg = msg\n        write.call(logger, o)\n      }\n    })(logger[k], k)\n  }\n  return logger\n}\n\npino.LOG_VERSION = 1\n\npino.levels = {\n  values: {\n    fatal: 60,\n    error: 50,\n    warn: 40,\n    info: 30,\n    debug: 20,\n    trace: 10\n  },\n  labels: {\n    '10': 'trace',\n    '20': 'debug',\n    '30': 'info',\n    '40': 'warn',\n    '50': 'error',\n    '60': 'fatal'\n  }\n}\n\npino.stdSerializers = {\n  req: mock,\n  res: mock,\n  err: mock\n}\n\nfunction bind (parent, bindings, level) {\n  return function () {\n    var args = new Array(1 + arguments.length)\n    args[0] = bindings\n    for (var i = 1; i < args.length; i++) {\n      args[i] = arguments[i - 1]\n    }\n    return parent[level].apply(this, args)\n  }\n}\n\nfunction set (logger, val, level, fallback) {\n  logger[level] = val > pino.levels.values[level] ? noop\n    : (logger[level] ? logger[level] : (_console[level] || _console[fallback] || noop))\n}\n\nfunction mock () { return {} }\nfunction noop () {}\n"}